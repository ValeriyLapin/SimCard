package com.example.simcard.db;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

/**
 * Simple notes database access helper class.
 */

public class SQLiteAdapter {

	public static final String KEY_TITLE = "title";
	public static final String KEY_BODY = "body";
	public static final String KEY_ROWID = "_id";

	private static final String TAG = "SQLiteAdapter";
	private static DatabaseHelper databaseHelper;
	private static SQLiteDatabase database;

	/**
	 * Database creation sql statement
	 */

	private static final String DATABASE_NAME = "DataBase";

	private static final String TABLE_Agents = "Agents";
	private static final String TABLE_Buyers = "Buyers";
	private static final String TABLE_Locations = "Locations";
	private static final String TABLE_Nominals = "Nominals";
	private static final String TABLE_Cards = "Cards";
	private static final String TABLE_SaleOrders = "SaleOrders";

	private static final int DATABASE_VERSION = 1;

	// Agents column names ------------------------------------

	// String text;
	// boolean isDefault;
	// int value;
	private static final String Agents_KEY_text = "text";
	private static final String Agents_KEY_isDefault = "isDefault";
	private static final String Agents_KEY_value = "value";

	// Agents table create statement
	private static final String CREATE_TABLE_Agents = "CREATE TABLE "
			+ TABLE_Agents + "(" + "_id integer PRIMARY KEY,"
			+ Agents_KEY_value + " INTEGER UNIQUE," + Agents_KEY_isDefault
			+ " TEXT," + Agents_KEY_text + " TEXT" + ")";

	// Buyers Table - column names ------------------------------------
	// String name;
	// int[] agentsIds;
	// int id;

	private static final String Buyers_KEY_name = "name";
	private static final String Buyers_KEY_agentsIds = "agentsIds";
	private static final String Buyers_KEY_id = "id";

	// Buyers table create statement
	private static final String CREATE_TABLE_Buyers = "CREATE TABLE "
			+ TABLE_Buyers + "(" + "_id integer PRIMARY KEY," + Buyers_KEY_id
			+ " INTEGER UNIQUE," + Buyers_KEY_name + " TEXT,"
			+ Buyers_KEY_agentsIds + " TEXT)";

	// Locations Table - column names ------------------------------------
	// int buyerId;
	// String name;
	// int[] agentsIds; //always null
	// int id;
	private static final String Locations_KEY_buyerId = "buyerId";
	private static final String Locations_KEY_name = "name";
	private static final String Locations_KEY_agentsIds = "agentsIds";
	private static final String Locations_KEY_id = "id";

	// Locations table create statement
	private static final String CREATE_TABLE_Locations = "CREATE TABLE "
			+ TABLE_Locations + "(" + "_id integer PRIMARY KEY,"
			+ Locations_KEY_id + " INTEGER UNIQUE," + Locations_KEY_name
			+ " TEXT," + Locations_KEY_agentsIds + " TEXT,"
			+ Locations_KEY_buyerId + " INTEGER)";

	// Nominals Table - column names ------------------------------------
	// String name;
	// int id;
	private static final String Nominals_KEY_name = "name";
	private static final String Nominals_KEY_id = "id";

	// Nominals table create statement
	private static final String CREATE_TABLE_Nominals = "CREATE TABLE "
			+ TABLE_Nominals + "(" + "_id integer PRIMARY KEY,"
			+ Nominals_KEY_id + " INTEGER UNIQUE," + Nominals_KEY_name
			+ " TEXT)";

	// Cards Table - column names ------------------------------------
	// String Sn;
	// int NominalId; if -1 that it's startPocket
	private static final String Cards_KEY_Sn = "Sn";
	private static final String Cards_KEY_NominalId = "NominalId";

	private static final String Cards_KEY_saleOrderId = "Cards_KEY_saleOrderId";

	// Cards table create statement
	private static final String CREATE_TABLE_Cards = "CREATE TABLE "
			+ TABLE_Cards + "(" + "_id integer PRIMARY KEY,"
			+ Cards_KEY_NominalId + " INTEGER," + Cards_KEY_saleOrderId
			+ " TEXT," + Cards_KEY_Sn + " TEXT)";

	// SaleOrders Table - column names ------------------------------------

	// Date dt; 
	// int AgentId;
	// int BuyerId;
	// int LocationId;
	// String Description;
	// int OrderType; //1 is sim card order, 2 - is scratch card order
	// final int OrderStatus = 1;
	// String UId; //autogenerated guid
	//
	// int Id;
	//
	// List<Card> listOfCards;

	private static final String SaleOrders_KEY_dt = "dt";
	private static final String SaleOrders_KEY_AgentId = "AgentId";
	private static final String SaleOrders_KEY_BuyerId = "BuyerId";
	private static final String SaleOrders_KEY_LocationId = "LocationId";
	private static final String SaleOrders_KEY_Description = "Description";
	private static final String SaleOrders_KEY_OrderType = "OrderType";
	private static final String SaleOrders_KEY_OrderStatus = "OrderStatus";
	private static final String SaleOrders_KEY_errorMessage = "errorMessage";

	private static final String SaleOrders_KEY_UId = "UId";
	// private static final String SaleOrders_KEY_Id = "Id";
	// private static final String SaleOrders_KEY_listOfCards = "listOfCards";
	private static final String SaleOrders_KEY_cards = "cards";

	// SaleOrders table create statement
	private static final String CREATE_TABLE_SaleOrders = "CREATE TABLE "
			+ TABLE_SaleOrders + "(" + "_id integer PRIMARY KEY,"
			+ SaleOrders_KEY_dt + " TEXT," + SaleOrders_KEY_AgentId
			+ " INTEGER," + SaleOrders_KEY_OrderStatus + " INTEGER,"
			+ SaleOrders_KEY_BuyerId + " INTEGER," + SaleOrders_KEY_LocationId
			+ " INTEGER," + SaleOrders_KEY_Description + " TEXT,"
			+ SaleOrders_KEY_cards + " INTEGER," + SaleOrders_KEY_errorMessage
			+ " TEXT," + SaleOrders_KEY_OrderType + " INTEGER,"
			+ SaleOrders_KEY_UId + " TEXT UNIQUE)";

	private SQLiteAdapter() {

	}

	private static class DatabaseHelper extends SQLiteOpenHelper {

		DatabaseHelper(Context context) {
			super(context, DATABASE_NAME, null, DATABASE_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {

			db.execSQL(CREATE_TABLE_Agents);
			db.execSQL(CREATE_TABLE_Buyers);
			db.execSQL(CREATE_TABLE_Locations);
			db.execSQL(CREATE_TABLE_Nominals);
			db.execSQL(CREATE_TABLE_Cards);
			db.execSQL(CREATE_TABLE_SaleOrders);

		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
					+ newVersion + ", which will destroy all old data");
			db.execSQL("DROP TABLE IF EXISTS " + TABLE_Agents);
			db.execSQL("DROP TABLE IF EXISTS " + TABLE_Buyers);
			db.execSQL("DROP TABLE IF EXISTS " + TABLE_Locations);
			db.execSQL("DROP TABLE IF EXISTS " + TABLE_Nominals);
			db.execSQL("DROP TABLE IF EXISTS " + TABLE_Cards);
			db.execSQL("DROP TABLE IF EXISTS " + TABLE_SaleOrders);
			onCreate(db);
		}
	}

	public static void open(Context context) { // throws SQLException
		if (databaseHelper == null)
			databaseHelper = new DatabaseHelper(context);
		if (database == null || !database.isOpen())
			database = databaseHelper.getWritableDatabase();
		database.execSQL("PRAGMA read_uncommitted = true;");

		// return this;
	}

	public static void close() {
		databaseHelper.close();

	}

	public static void createAgents(JSONArray agents) {
		if (agents == null)
			return;
		synchronized ("db") {
			database.beginTransaction();
			try {
				deleteAllAgents();
				for (int i = 0; i < agents.length(); i++) {
					try {
						createAgent((JSONObject) agents.get(i));
					} catch (JSONException e) {
						Log.e("createAgents", e.toString());
					}
				}
				database.setTransactionSuccessful();
			} finally {
				database.endTransaction();
			}
		}
	}

	@SuppressLint("SimpleDateFormat")
	public static long createOrUpdateSaleOrder(SaleOrder saleOrder) {
		long _id = -1;
		if (saleOrder == null)
			return _id;

		String date = "";
		SimpleDateFormat fromUser = new SimpleDateFormat("dd/MM/yyyy");
		try {
			date = fromUser.format(saleOrder.dt);
		} catch (Exception e) {
			Log.e("createOrUpdateSaleOrder", e.toString());
		}

		final ContentValues initialValues = new ContentValues();
		initialValues.put(SaleOrders_KEY_dt, date);
		initialValues.put(SaleOrders_KEY_AgentId, saleOrder.getAgentId());
		initialValues.put(SaleOrders_KEY_BuyerId, saleOrder.getBuyerId());

		initialValues.put(SaleOrders_KEY_LocationId, saleOrder.getLocationId());
		initialValues.put(SaleOrders_KEY_Description, saleOrder.Description);

		initialValues.put(SaleOrders_KEY_OrderStatus, saleOrder.OrderStatus);

		initialValues.put(SaleOrders_KEY_OrderType, saleOrder.OrderType);
		initialValues.put(SaleOrders_KEY_UId, saleOrder.getUId());

		initialValues.put(SaleOrders_KEY_errorMessage, saleOrder.errorMessage);

		int cards = saleOrder.getCards();
		// if (saleOrder.listOfCards != null) {
		// cards = saleOrder.listOfCards.size();
		// }

		initialValues.put(SaleOrders_KEY_cards, cards);

		synchronized ("db") {
			database.beginTransaction();
			try {
				final String selectQuery = "SELECT  * FROM " + TABLE_SaleOrders
						+ " WHERE " + SaleOrders_KEY_UId + " = '"
						+ saleOrder.getUId() + "'" + " LIMIT 1";
				final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

				if (cursor.moveToFirst()) {
					_id = cursor.getInt(cursor.getColumnIndex("_id"));
					database.update(TABLE_SaleOrders, initialValues, "_id "
							+ "=" + _id, null);
					Log.i("createOrUpdateSaleOrder", "update  _id=" + _id);
					database.delete(TABLE_Cards, Cards_KEY_saleOrderId + " = "
							+ _id, null);
				} else {
					_id = database
							.insert(TABLE_SaleOrders, null, initialValues);
					Log.i("createOrUpdateSaleOrder", "insert new _id=" + _id);
				}

				// closing connection
				cursor.close();

				final SQLiteStatement mInsertAttributeStatement = database
						.compileStatement("INSERT INTO " + TABLE_Cards + " ("
								+ Cards_KEY_Sn + ", " + Cards_KEY_NominalId
								+ ", " + Cards_KEY_saleOrderId
								+ ") VALUES (?,?,?)");

				for (Card card : saleOrder.listOfCards) {
					Log.i("createOrUpdateSaleOrder",
							"add card " + card.toString());
					mInsertAttributeStatement.bindString(1, card.Sn);
					mInsertAttributeStatement.bindLong(2, card.getNominalId());
					mInsertAttributeStatement.bindLong(3, _id);
					mInsertAttributeStatement.execute();
					// createCard(card);
				}
				database.setTransactionSuccessful();
			} finally {
				database.endTransaction();
			}
		}

		return _id;
	}


	public static List<SaleOrder> getAllSaleOrders(final boolean withCards) {
		return getAllSaleOrdersByStatus(0, withCards);
	}

	@SuppressLint("SimpleDateFormat")
	public static SaleOrder getSaleOrderByUId(final String uId,
			final boolean withCards) {
		if (uId == null || uId.equals(new String("")))
			return null;

		SaleOrder saleOrder = null;

		final String selectQuery = "SELECT  * FROM " + TABLE_SaleOrders
				+ " WHERE " + SaleOrders_KEY_UId + " = '" + uId + "'";

		synchronized ("db") {
			final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

			// looping through all rows and adding to list
			if (cursor.moveToFirst()) {
				saleOrder = getSaleOrderFromCursor(cursor, withCards);

			}

			// closing connection
			cursor.close();
		}
		return saleOrder;
	}

	@SuppressLint("SimpleDateFormat")
	public static ArrayList<SaleOrder> getAllSaleOrdersByStatus(
			final int orderStatus, final boolean withCards) {
		ArrayList<SaleOrder> list = new ArrayList<SaleOrder>();
		String selectQuery;

		switch (orderStatus) {
		case 1: // new and with errors
			selectQuery = "SELECT  * FROM " + TABLE_SaleOrders + " WHERE "
					+ SaleOrders_KEY_OrderStatus + " = 1";
			break;

		case 2: // synchronized
			selectQuery = "SELECT  * FROM " + TABLE_SaleOrders + " WHERE "
					+ SaleOrders_KEY_OrderStatus + " = 2";
			break;

		case 0: // all
			selectQuery = "SELECT  * FROM " + TABLE_SaleOrders;
			break;

		default:
			selectQuery = "SELECT  * FROM " + TABLE_SaleOrders;
		}
		synchronized ("db") {
			final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

			// looping through all rows and adding to list
			if (cursor.moveToFirst()) {
				do {
					final SaleOrder saleOrder = getSaleOrderFromCursor(cursor,
							withCards);
					list.add(saleOrder);
				} while (cursor.moveToNext());
			}

			// closing connection
			cursor.close();
		}
		return list;
	}

	private static SaleOrder getSaleOrderFromCursor(final Cursor cursor,
			boolean withCards) {

		Date dt = new Date();
		final String dtString = cursor.getString(cursor
				.getColumnIndex(SaleOrders_KEY_dt));
		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		try {
			dt = df.parse(dtString);
		} catch (ParseException e) {
			Log.e("getAllSaleOrdersByStatus", e.toString());
		}
		Log.i("getSaleOrderFromCursor",
				"dtString=" + dtString + ", dt=" + dt.toString());

		final int agentId = cursor.getInt(cursor
				.getColumnIndex(SaleOrders_KEY_AgentId));

		final int id = cursor.getInt(cursor.getColumnIndex("_id"));

		final int buyerId = cursor.getInt(cursor
				.getColumnIndex(SaleOrders_KEY_BuyerId));

		final int locationId = cursor.getInt(cursor
				.getColumnIndex(SaleOrders_KEY_LocationId));

		final String description = cursor.getString(cursor
				.getColumnIndex(SaleOrders_KEY_Description));

		final int orderType = cursor.getInt(cursor
				.getColumnIndex(SaleOrders_KEY_OrderType));

		final int OrderStatus = cursor.getInt(cursor
				.getColumnIndex(SaleOrders_KEY_OrderStatus));

		final String errorMessage = cursor.getString(cursor
				.getColumnIndex(SaleOrders_KEY_errorMessage));

		final String uId = cursor.getString(cursor
				.getColumnIndex(SaleOrders_KEY_UId));

		final int cards = cursor.getInt(cursor
				.getColumnIndex(SaleOrders_KEY_cards));

		List<Card> listOfCards = null;

		if (withCards) {
			listOfCards = getCards(id);
		}

		final SaleOrder saleOrder = new SaleOrder(id, dt,
				getAgentBuId(agentId), getBuyerById(buyerId),
				getLocationById(locationId), description, orderType,
				OrderStatus, errorMessage, uId, listOfCards, cards);

		return saleOrder;
	}

	private static Agent getAgentBuId(int agentId) {
		Agent agent = null;

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Agents + " WHERE "
				+ Agents_KEY_value + " = " + agentId;

		final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

		// looping through all rows and adding to list
		if (cursor.moveToFirst()) {
			final String text = cursor.getString(cursor
					.getColumnIndex(Agents_KEY_text));
			final int value = cursor.getInt(cursor
					.getColumnIndex(Agents_KEY_value));

			final boolean isDefault = (cursor.getInt(cursor
					.getColumnIndex(Agents_KEY_isDefault)) == 1);

			agent = new Agent(text, isDefault, value);
		}

		cursor.close();

		return agent;
	}

	private static Location getLocationById(int locationId) {
		Log.i("getLocationById", "locationId=" + locationId);
		Location location = null;

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Locations
				+ " WHERE " + Locations_KEY_id + " = " + locationId;

		final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

		// looping through all rows and adding to list
		if (cursor.moveToFirst()) {
			final String name = cursor.getString(cursor
					.getColumnIndex(Locations_KEY_name));

			final String agentsIds = cursor.getString(cursor
					.getColumnIndex(Locations_KEY_agentsIds));

			final int buyerId = cursor.getInt(cursor
					.getColumnIndex(Locations_KEY_buyerId));

			final int id = cursor.getInt(cursor
					.getColumnIndex(Locations_KEY_id));

			location = new Location(buyerId, name, agentsIds, id);
		}

		cursor.close();
		Log.i("getLocationById", "location=" + location);
		return location;
	}

	private static Buyer getBuyerById(int buyerId) {
		Buyer buyer = null;

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Buyers + " WHERE "
				+ Buyers_KEY_id + " = " + buyerId;

		final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

		// looping through all rows and adding to list
		if (cursor.moveToFirst()) {

			final String name = cursor.getString(cursor
					.getColumnIndex(Buyers_KEY_name));

			final String agentsIds = cursor.getString(cursor
					.getColumnIndex(Buyers_KEY_agentsIds));

			final int id = cursor.getInt(cursor.getColumnIndex(Buyers_KEY_id));

			buyer = new Buyer(name, agentsIds, id);
		}

		cursor.close();

		return buyer;
	}

	private static List<Card> getCards(final int saleOrderId) {
		List<Card> list = new ArrayList<Card>();

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Cards + " WHERE "
				+ Cards_KEY_saleOrderId + " = " + saleOrderId;

		final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

		// looping through all rows and adding to list
		if (cursor.moveToFirst()) {
			do {

				final String Sn = cursor.getString(cursor
						.getColumnIndex(Cards_KEY_Sn));

				final int NominalId = cursor.getInt(cursor
						.getColumnIndex(Cards_KEY_NominalId));

				if (NominalId == -1) {
					list.add(new Card(Sn, null));

				} else {
					list.add(new Card(Sn, getNominal(NominalId)));
				}

			} while (cursor.moveToNext());
		}
		// closing connection
		cursor.close();
		return list;
	}

	private static Nominal getNominal(int nominalId) {
		Nominal nominal = null;

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Nominals
				+ " WHERE " + Nominals_KEY_id + " = " + nominalId;

		final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

		// looping through all rows and adding to list
		if (cursor.moveToFirst()) {
			final String name = cursor.getString(cursor
					.getColumnIndex(Nominals_KEY_name));
			final int id = cursor
					.getInt(cursor.getColumnIndex(Nominals_KEY_id));
			nominal = new Nominal(name, id);
		}

		cursor.close();

		return nominal;
	}

	private static long createAgent(JSONObject jsonObject) {
		final Agent agent = new Agent(jsonObject);
		return createAgent(agent);
	}

	private static long createAgent(Agent agent) {

		final ContentValues initialValues = new ContentValues();

		initialValues.put(Agents_KEY_isDefault, true);

		initialValues.put(Agents_KEY_isDefault, agent.isDefault);

		initialValues.put(Agents_KEY_text, agent.text);
		initialValues.put(Agents_KEY_value, agent.value);
		return database.insert(TABLE_Agents, null, initialValues);
	}

	public static void createBuyers(JSONArray buyers) {
		if (buyers == null)
			return;

		synchronized ("db") {

			database.beginTransaction();
			try {
				deleteAllBuyers();
				for (int i = 0; i < buyers.length(); i++) {
					try {
						createBuyer((JSONObject) buyers.get(i));
					} catch (JSONException e) {
						Log.e("createBuyers", e.toString());
					}
				}
				database.setTransactionSuccessful();
			} finally {
				database.endTransaction();
			}
		}
	}

	private static long createBuyer(JSONObject jsonObject) {
		final Buyer buyer = new Buyer(jsonObject);
		return createBuyer(buyer);
	}

	private static long createBuyer(Buyer buyer) {
		final ContentValues initialValues = new ContentValues();
		initialValues.put(Buyers_KEY_name, buyer.name);
		initialValues.put(Buyers_KEY_id, buyer.id);
		initialValues.put(Buyers_KEY_agentsIds, buyer.agentsIds);
		return database.insert(TABLE_Buyers, null, initialValues);
	}

	public static void createLocations(JSONArray locations) {

		if (locations == null)
			return;
		synchronized ("db") {

			database.beginTransaction();
			try {
				deleteAllLocations();

				for (int i = 0; i < locations.length(); i++) {
					try {
						createLocation((JSONObject) locations.get(i));
					} catch (JSONException e) {
						Log.e("createLocations", e.toString());
					}
				}
				database.setTransactionSuccessful();
			} finally {
				database.endTransaction();
			}
		}
	}

	private static long createLocation(JSONObject jsonObject) {
		final Location location = new Location(jsonObject);
		return createLocation(location);
	}

	private static long createLocation(Location location) {
		final ContentValues initialValues = new ContentValues();
		initialValues.put(Locations_KEY_id, location.id);
		initialValues.put(Locations_KEY_name, location.name);
		initialValues.put(Locations_KEY_agentsIds, location.agentsIds);
		initialValues.put(Locations_KEY_buyerId, location.buyerId);
		return database.insert(TABLE_Locations, null, initialValues);
	}

	// String Sn;
	// int NominalId; // if -1 that it's startPocket

	public static void createNominals(JSONArray nominals) {
		if (nominals == null)
			return;
		synchronized ("db") {
			database.beginTransaction();
			try {
				deleteAllNominals();
				for (int i = 0; i < nominals.length(); i++) {
					try {
						createNominal((JSONObject) nominals.get(i));
					} catch (JSONException e) {
						Log.e("createLocations", e.toString());
					}
				}
				database.setTransactionSuccessful();
			} finally {
				database.endTransaction();
			}
		}
	}

	private static long createNominal(JSONObject jsonObject) {
		final Nominal nominal = new Nominal(jsonObject);
		return createNominal(nominal);
	}

	private static long createNominal(Nominal nominal) {
		final ContentValues initialValues = new ContentValues();
		initialValues.put(Nominals_KEY_id, nominal.id);
		initialValues.put(Nominals_KEY_name, nominal.name);
		return database.insert(TABLE_Nominals, null, initialValues);
	}

	private static boolean deleteAllAgents() {
		return database.delete(TABLE_Agents, null, null) > 0;
	}

	private static boolean deleteAllBuyers() {
		return database.delete(TABLE_Buyers, null, null) > 0;
	}

	private static boolean deleteAllLocations() {
		return database.delete(TABLE_Locations, null, null) > 0;
	}

	private static boolean deleteAllNominals() {
		return database.delete(TABLE_Nominals, null, null) > 0;
	}

	public static boolean deleteAllSaleOrders() {
		boolean result;
		synchronized ("db") {
			result = database.delete(TABLE_SaleOrders, null, null) > 0;
		}
		return result;
	}

	public static List<Agent> getAllAgents() {
		List<Agent> list = new ArrayList<Agent>();

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Agents;

		synchronized ("db") {
			final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

			// looping through all rows and adding to list
			if (cursor.moveToFirst()) {
				do {

					final String text = cursor.getString(cursor
							.getColumnIndex(Agents_KEY_text));
					final boolean isDefault = (cursor.getInt(cursor
							.getColumnIndex(Agents_KEY_isDefault)) == 1);

					final int value = cursor.getInt(cursor
							.getColumnIndex(Agents_KEY_value));
					list.add(new Agent(text, isDefault, value));
				} while (cursor.moveToNext());
			}
			// closing connection
			cursor.close();
		}
		return list;
	}


	public static List<Buyer> getAgentBuyers(int agentValue) {
		List<Buyer> list = new ArrayList<Buyer>();

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Buyers
				+ " WHERE (" + genString(Buyers_KEY_agentsIds, agentValue)
				+ " )";

		synchronized ("db") {
			final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

			// looping through all rows and adding to list
			if (cursor.moveToFirst()) {
				do {

					final String name = cursor.getString(cursor
							.getColumnIndex(Buyers_KEY_name));

					final int id = cursor.getInt(cursor
							.getColumnIndex(Buyers_KEY_id));

					final String agentsIds = cursor.getString(cursor
							.getColumnIndex(Buyers_KEY_agentsIds));

					list.add(new Buyer(name, agentsIds, id));
				} while (cursor.moveToNext());
			}
			// closing connection
			cursor.close();
		}
		Log.i("getAgentBuyers", list.toString());
		return list;
	}

	private static String genString(String key, int agentValue) {

		return key + " LIKE '[" + String.valueOf(agentValue) + ",%'" + " OR "
				+ key + " LIKE '%," + String.valueOf(agentValue) + ",%'"
				+ " OR " + key + " LIKE '%," + String.valueOf(agentValue)
				+ "]'" + " OR " + key + " LIKE '[" + String.valueOf(agentValue)
				+ "]'";
	}

	public static List<Location> getBuyersLocation(int buyerId, int agentValue) {
		Log.i("testLocation", "buyerId=" + buyerId + ", agentValue="
				+ agentValue);
		List<Location> list = new ArrayList<Location>();

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Locations
				+ " WHERE  (((" + Locations_KEY_buyerId + " = " + "'"
				+ String.valueOf(buyerId) + "'" + ")" + " AND " + "("
				+ Locations_KEY_agentsIds + " = 'null' )) OR (( "
				+ Locations_KEY_agentsIds + " <> 'null') AND ("
				+ genString(Locations_KEY_agentsIds, agentValue) + " )))";

		synchronized ("db") {
			final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

			// looping through all rows and adding to list
			if (cursor.moveToFirst()) {
				do {

					final String name = cursor.getString(cursor
							.getColumnIndex(Locations_KEY_name));

					final int id = cursor.getInt(cursor
							.getColumnIndex(Locations_KEY_id));

					final int buyerId1 = cursor.getInt(cursor
							.getColumnIndex(Locations_KEY_buyerId));

					final String agentsIds = cursor.getString(cursor
							.getColumnIndex(Buyers_KEY_agentsIds));

					list.add(new Location(buyerId1, name, agentsIds, id));
				} while (cursor.moveToNext());
			}
			// closing connection
			cursor.close();
		}

		Log.i("getBuyersLocation", list.toString());
		return list;
	}

	public static List<Nominal> getAllNominals() {
		List<Nominal> list = new ArrayList<Nominal>();

		// Select All Query
		final String selectQuery = "SELECT  * FROM " + TABLE_Nominals;

		synchronized ("db") {
			final Cursor cursor = database.rawQuery(selectQuery, null);// selectQuery,selectedArguments

			// looping through all rows and adding to list
			if (cursor.moveToFirst()) {
				do {

					final String name = cursor.getString(cursor
							.getColumnIndex(Nominals_KEY_name));

					final int id = cursor.getInt(cursor
							.getColumnIndex(Nominals_KEY_id));
					list.add(new Nominal(name, id));
				} while (cursor.moveToNext());
			}
			// closing connection
			cursor.close();
		}
		Log.i("getAllNominals", list.toString());
		return list;
	}

	public static void delSaleOrders(ArrayList<SaleOrder> list) {

		synchronized ("db") {
			database.beginTransaction();
			try {
				for (SaleOrder order : list) {
					database.delete(TABLE_Cards, Cards_KEY_saleOrderId + " = "
							+ order.id, null);
					database.delete(TABLE_SaleOrders, SaleOrders_KEY_UId
							+ " = '" + order.getUId() + "'", null);
				}
				database.setTransactionSuccessful();
			} finally {
				database.endTransaction();
			}
		}
	}

	public static List<Card> getListOfCards(SaleOrder order) {
		List<Card> listOfCards = new ArrayList<Card>();
		synchronized ("db") {
			listOfCards = getCards(order.id);
		}
		return listOfCards;
	}
}
